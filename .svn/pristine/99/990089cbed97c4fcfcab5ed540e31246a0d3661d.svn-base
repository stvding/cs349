'use strict';

var ViewModel = function(activityModel) {
    this.activityModel = activityModel;
    this.stress = true;
    this.happiness = true;
    this.energy = true;

    // INITIAL VIEW
    var canvas = document.getElementById("canvas_display");
    var options = document.getElementById("customize_options");
    canvas.style.display = 'none';
    options.style.display = 'none';
};

_.extend(ViewModel.prototype, {

    toggleStress: function() {
        this.stress = !this.stress;
        this.createGraph();
    },
    toggleHappiness: function() {
        this.happiness = !this.happiness;
        this.createGraph();
    },
    toggleEnergy: function() {
        this.energy = !this.energy;
        this.createGraph();
    },

    toggleView: function(GRAPH_SELECTED_EVENT, time, graphName) {
        var canvas = document.getElementById("canvas_display");
        var tabular = document.getElementById("table_display");
        var options = document.getElementById("customize_options");

        if (graphName == "tabular") {
            canvas.style.display = 'none';
            tabular.style.display = 'table';
            options.style.display = 'none';
        }
        else {
            canvas.style.display = 'block';
            options.style.display = 'block';
            tabular.style.display = 'none';
        }
    },

    createGraph: function() {
        var canvas = document.getElementById("canvas_display");
        var options = document.getElementById("customize_options");
        var ctx = canvas.getContext('2d');
        var height = canvas.height;
        var width = canvas.width;
        var bufferSouth = 30;
        var bufferNorth = 5;
        var bufferY = bufferSouth + bufferNorth;
        var view = this;

        ctx.beginPath();
        ctx.rect(0, 0, width, height);
        ctx.fillStyle = "#d3d3d3";
        ctx.fill();
        ctx.lineWidth = 2;
        ctx.strokeStyle = 'black';
        ctx.stroke();

        var dataArray = this.activityModel.getActivityDataPoints();
        var dataNum = dataArray.length;
        var realHeight = height - bufferY;

        _.each(dataArray, function(datapoint,index,list) {
            var startX, startY;
            startX = ( width / (dataNum+1) ) * (index + 1);
            view.drawLabel(ctx, startX, height, datapoint.activityType);

            // ENERGY LEVEL
            if (view.energy) {
                startY = (height - ((datapoint.activityDataDict.energyLevel-0.5) / 5) *
                          realHeight) - bufferSouth;
                view.drawEnergy(ctx, startX, startY);
            }

            // STRESS LEVEL
            if (view.stress) {
                startY = (height - ((datapoint.activityDataDict.stressLevel-0.5) / 5) *
                          realHeight) - bufferSouth;
                view.drawStress(ctx, startX, startY);
            }

            // HAPPINESS LEVEL
            if (view.happiness) {
                startY = (height - ((datapoint.activityDataDict.happinessLevel-0.5) / 5) *
                          realHeight) - bufferSouth;
                view.drawHappiness(ctx, startX, startY);
            }
        });
    },

    drawLabel: function(ctx, startX, startY, string) {
        ctx.fillStyle = "#2E2E2E";
        ctx.font="15px Georgia";
        ctx.fillText(string, startX-25, startY-10);
    },
    drawEnergy: function(ctx, startX, startY) {
        this.drawCircle(ctx, startX, startY, 15, 'orange');
    },
    drawStress: function(ctx, startX, startY) {
        this.drawTriangle(ctx, startX, startY, 20, 'red');
    },
    drawHappiness: function(ctx, startX, startY) {
        this.drawSquare(ctx, startX, startY, 15, 'green');
    },
    drawCircle: function(ctx, startX, startY, radius, colour) {
        ctx.beginPath();
        ctx.arc(startX, startY, radius, 0, 2*Math.PI);
        ctx.strokeStyle = colour;
        ctx.stroke();
    },
    drawSquare: function(ctx, startX, startY, size, colour) {
        ctx.beginPath();
        ctx.rect(startX-size/2, startY-size/2, size, size);
        ctx.strokeStyle = colour;
        ctx.stroke();
    },
    drawTriangle: function(ctx, startX, startY, height, colour) {
        var angle = Math.PI/6.0;
        var hyp = height / (2.0 * Math.cos(angle));
        ctx.beginPath();
        ctx.moveTo(startX, startY - height/2.0);
        ctx.lineTo(startX - hyp, startY + height/2.0);
        ctx.lineTo(startX + hyp, startY + height/2.0);
        ctx.lineTo(startX, startY - height/2.0);
        ctx.strokeStyle = colour;
        ctx.stroke();
    },
    createTable: function() {
        var tbl = document.getElementById('table_display');
        var row = tbl.insertRow(0);
        var cell = row.appendChild(document.createElement("th"));
        cell.innerHTML = "Activities you are tracking";
        var cell = row.appendChild(document.createElement("th"));
        cell.innerHTML = "Time spent";

        _.each(this.activityModel.getActivityDataPoints(), function(datapoint, index, list) {
            row = tbl.insertRow(-1);
            cell = row.insertCell(-1);
            var text = document.createTextNode(datapoint.activityType);
            cell.appendChild(text);

            cell = row.insertCell(-1);
            text = document.createTextNode(datapoint.activityDurationInMinutes);
            cell.appendChild(text);
        });
        var display_div = document.getElementById('graph_display');
        display_div.appendChild(tbl);
    },

    showInput: function() {
        input_div.style.display = 'block';
        analysis_div.style.display = 'none';
        analysis_link.className = "";
        input_link.className = "active";
    },

    showAnalysis: function() {
        input_div.style.display = 'none';
        analysis_div.style.display = 'block';
        analysis_link.className = "active";
        input_link.className = "";
    },
});
